load_module /usr/local/openresty/nginx/modules/ngx_rtmp_module.so;

worker_processes  auto;
error_log /usr/local/openresty/nginx/logs/error.log info;

user root;

events {
    worker_connections  1024;
}

http {

    lua_package_path "/usr/local/openresty/lualib/?.lua;;";

    server {
        listen 18080;

        location /ivs {

            access_by_lua_block {
                ngx.req.read_body()
                local args, err = ngx.req.get_post_args()
                ngx.ctx.ivs = args["ivs"]
                ngx.log(ngx.INFO, ngx.ctx.ivs)
            }

            content_by_lua_block {
                if ngx.ctx.ivs ~= nil then
                    local ivs = ngx.ctx.ivs
                    ngx.redirect("rtmps://f9b86c5f1f70.global-contribute.live-video.net:443/app/" .. ivs)
                end
            }
        }

        location /youtube {

            access_by_lua_block {
                ngx.req.read_body()
                local args, err = ngx.req.get_post_args()
                ngx.ctx.youtube = args["youtube"]
            }

            content_by_lua_block {
                if ngx.ctx.youtube ~= nil then
                    local youtube = ngx.ctx.youtube
                    ngx.redirect("rtmp://a.rtmp.youtube.com/live2/" .. youtube)
                end
            }
        }

        location /auth {

            access_by_lua_block {
                ngx.req.read_body()
                local args, err = ngx.req.get_post_args()
                ngx.ctx.token = args["token"]
            }

            content_by_lua_block {
                local http = require "resty.http"
                local httpc = http.new()

                if ngx.ctx.token ~= nil then
                    local res, err = httpc:request_uri("http://192.168.168.100:18080/auth?token=" .. ngx.ctx.token)

                    ngx.log(ngx.INFO, ngx.ctx.token)

                    if res then
                        ngx.log(ngx.INFO, res.body)
                        if res.body == 'success' then
                            return 200
                        end
                    end
                end

                ngx.log(ngx.ERR, "unauthorized")
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            }
        }


        location /api {
            default_type text/plain;

            content_by_lua_block {
                local http = require "resty.http"
                local httpc = http.new()

                local res, err = httpc:request_uri("http://192.168.50.187:18080/test")
                if not res then
                    ngx.say("Failed to request API: ", err)
                    return
                end

                ngx.say(res.body)
            }
        }
    }

    server {
        listen 8080;

        root /tmp;

        location /hls {
            types {
                 application/vnd.apple.mpegurl m3u8;
                 video/mp2t ts;
            }
        }
    }
}

rtmp {
    resolver 1.1.1.1 8.8.8.8 ipv6=off;
    resolver_timeout 30s;

    rtmp_relay_ssl_protocols TLSv1.2 TLSv1.3;
    rtmp_relay_ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    rtmp_relay_ssl_server_name on;
    rtmp_relay_ssl_verify on;
    rtmp_relay_ssl_verify_depth 5;
    rtmp_relay_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;

    notify_relay_redirect on;
    drop_idle_publisher 10s;

    server {
        listen 1935;
        chunk_size 4096;

        application live {

            live on;
            publish_notify on;

            on_publish http://localhost:18080/auth;

            exec_push ffmpeg -i rtmp://localhost:1935/$app/$name -c copy -f flv rtmp://127.0.0.1:1935/youtube/$name?$args -c copy -f flv rtmp://127.0.0.1:1935/ivs/$name?$args;

            recorder audio {
                record audio;
                record_path /tmp/rec/audio;
                record_suffix -%d-%b-%y-%T.flv;
                record_interval 10s;
                record_notify on;
#                 on_record_done http://192.168.50.187:18080/audio;
            }
        }

        application ivs {
            live on;

            on_publish http://127.0.0.1:18080/ivs;
        }

        application youtube {
            live on;

            on_publish http://127.0.0.1:18080/youtube;
        }
    }
}